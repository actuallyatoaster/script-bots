Welcome to BotArena!

BotArena is an arena-based objective defense game, where you must design and
purchase bots in order to defend the objective from increasingly difficult
waves of enemies. You recieve a reward for each enemy and wave you survive, which
can in turn be used to purchase more bots for defense. The goal is to survive
as long as possible.


1. DESIGNING YOUR BOT

You can have up to 5 bot presets, represented by the sections at the bottom of the
game screen. You may purchase a bot from a preset, assuming you have enough money,
by clicking the "buy" button, then clicking wherever you want to place the bot.

Clicking the "edit" button will open an equipment screen, where you can choose which
weapons and buffs you want to use with your bot. You can equip as many or few as
you like, just remember that a bot with more equipment will cost more!

The editor will also display where your bots script file is located. Your bot
won't do anything on its own, you'll have to program its behaviour! To get started,
open the file indicated by the editor, which should look something like scripts/bots/user-bot#.bot


2. PROGRAMMING YOUR BOT

You will program your bot in a language called BotScript, created specifically
for the purpose of programming bots. 


2.1 BASIC SYNTAX

A valid statement in BotScript falls into one of three categories: variable
assignment, conditionals, or logging/printing.

All whitespace except new lines is completely removed and therfore ignored during
parsing.

You may only have one statement per line.


2.1.0 COMMENTS

Anything on a line after a # will be ignored. Any lines that are all whitespace will
be ignored. If a line is just an expression, the expression will be evaluated
but not used for anything.


2.1.1 VARIABLES

There are two variable types: num and bool, or Numbers and Booleans. A num can
be positive or negative, integer or float. If you have a num that is a float
extremely close to an integer valuem, it will automatically be rounded to an integer.
A bool can take two values: True or False.

To create a variable, type [num or bool] [variable name] = [expression]
For example, num myNumber = 3.6

To assign a new value to a variable that has already been created, type
        [variable name] = [expression]
For example, myNumber = 2
Note that the expression must be of the same type as the variable.

Your code is run several times per second with each in-game update. As a result,
your local variables are reset every time your code is written. If you want a variable
to persist, prefix the variable name with $ whenever you create, assign, or use it.
Note you must create this within a FIRST_CALL conditional (more on that soon)

A NOTE ON NEGATIVES

Due to difficulties having operators that take a variable number of inputs, you
cannot use '-' to make a number negative. That is, num A = -2 will result in an
error. Instead, use the negative operator '^', which will negate any number after it.
Alternatively, you can also type 0-[expression].


2.1.2 EXPRESSIONS

You have available to you the usual numerical operators you expect. These are: 
+, -, /, *, %, **, and //. With the exception of '-' (see above), these perform
the same operations they perform in python. You also have the ^ operator, as
seen above.

You can also use boolean operators. Specifically, you may use
&&: Boolean AND
||: Boolean OR
! : Boolean NOT

You may use the following comparators: >, <, >=, <=, ==, !=
The first four can only be used to compare numerical expressions, but the last
two may be used for both numerical and boolean expressions.

In BotScript, expressions are evaluated right-to-left and do not respect order of
operations. Therefore, I strongly reccomend liberal use of parentheses to avoid
introducing unexpected bugs. Expressions inside parentheses will always be evaluated
first. You may nest as many sets of parentheses as you like.


2.1.3 CONDITIONALS

A conditional can take one of two forms:

if [expression]
    ...
endif

OR

if [expression]
    ...
endif
else
    ...
endelse

If the expression evaluates to true, everything before the endif will be executed.
If it evaluates to false, it will execute the else block (if applicable) then
resume.

One helpful constant available to you is FIRST_CALL, which will be True if your
script is being run for the first time, and false otherwise. You should use this
if you want to declare persistent variables and use them continuously.


2.1.4 LOGGING

If a line has the following content:
log:[expression]

the value of [expression] will be displayed in green text in the top-left corner
of the screen. Note that since BotScript does not support strings, you may only
log a number or boolean value. 


2.2 BUILTIN FUNCTIONS

While BotScript in general does not support functions, you have a handful of
mathematical functions built in, should you need them. The syntax for calling
a builtin function is as follows:
    [function]:[expression]

This will return the value of [function] with [expression] as an input.

Note that all trigonometric functions use radians. For this reason, you have a
'pi' constant available to you.

The following is a list of all functions available, most of which are self-explanatory.

cos, sin, tan, arccos, arcsin, arctan, abs, floor, ceil, round, rand

The rand function will return an integer between 0(inclusive) and the
input (exclusive).


2.3 CONTROLLING YOUR BOT

Your script will control your bot through a series of variables. Some are constants
and provide your script access to information about the environment. Others
you can modify, which allow your bot to move, aim, and fire.


2.3.1 CONSTANTS

The following is an exhaustive list of the constants available withing your script.
As a note, coordinates take the (x,y) form, with (0,0) in the top-left corner,
and x and y increasing as you move right or down, respectively.

pi: num, the value of pi
FIRST_CALL: bool, whether this is the first time your script has been called

A_WIDTH: num, the width of the Arena in pixels
A_HEIGHT: num, the height of the Arena in pixels

D_TIME: num, time elapsed in seconds since the last time the script was called

objective.x: num, the x-position of the objective
objective.y: num, the y-position of the objective
objective.health: num, the current health of the objective
objective.reldir: num, the direction of the objective relative to you, in radians
(ie, moving in this direction will be moving towards the objective)

bot.x: the x-position of your bot
bot.y: the y-position of your bot

enemy.count: num, the number of enemies currently in the Arena
enemy.nearest.x: num, the x position of the nearest enemy bot
enemy.nearest.y: num, the y position of the nearest enemy bot

enemy.nearest.reldir: num the direction of the enemy relative to you, in radians
(ie, what direction you must shoot or move in to be aiming at the enemy bot)

enemy.nearest.move.direction: num, the direction the enemy is moving, in radians
enemy.nearest.move.speed: the speed of the nearest enemy, in pixels per second


2.3.2 EXTERNALS

You command your bot by updating variables called Externals. These variables 
control how your bot moves and fires.

move.direction: num, the direction in which you wish to move, in radians

move.speed: num between 1 and -1, the proportion of your max speed to move at. 
(using a number greater than 1 will not raise an error, but your speed
is capped at 1)


For controlling weapons, each weapon has an associated script name. These are
as follows:

Standard Gun: standard,
Cloud Sprayer: cloud,
Sniper Rifle: sniper,
Minigun: minigun,
Laser: laser

For each weapon equipped to your bot, you have two externals:

[scriptName].direction: num, the direction to aim in, in radians
[scriptName].fire: bool, whether or not to fire.
(note that regardless of the value of [scriptName].fire, firing is limited
by your weapon's rate of fire)

3 ERRORS

4 REPL


basic syntax, if/else
^ operator - equivalent to multiplying everything to the rigth by -1

move.speed, move.direction
bot.x, bot.y
enemy.count
enemy.nearest.x, enemy.nearest.y, enemy.nearest.reldir
equipmentFire
equipmentDirection

builtins
random

D_TIME
FIRST_CALL
pi

A_WIDTH
A_HEIGHT

rand:x integer between 0(inclusive) and x (exclusive)

extnerals persist
locals don't

persistent local: $: $ at the start of variable name will designate a
persistent local variable. If you declare a persistent local variable outside
of a "if firstCall" conditional, you will get an error as you will be declaring
the variable every update even though it alreay exists.
